{
  "name": "perfmon",
  "version": "0.2.0",
  "author": {
    "name": "Ben Taber",
    "url": "ben.taber@markit.com"
  },
  "description": "Windows perfmon metrics stream",
  "keywords": "perfmon logman typeperf win32 windows metrics stream monitor performance",
  "homepage": "https://github.com/markitondemand/node-perfmon",
  "bugs": "https://github.com/markitondemand/node-perfmon/issues",
  "main": "./perfmon.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/markitondemand/node-perfmon.git"
  },
  "os": [
    "win32"
  ],
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "readme": "# perfmon\n\nStreaming [Performance Monitor](http://technet.microsoft.com/en-us/library/cc749249.aspx) metrics for [Node](http://nodejs.org) on Windows.\n\n[node-perfmon](http://markitondemand.github.com/node-perfmon) is a thin wrapper around [typeperf](http://technet.microsoft.com/en-us/library/bb490960.aspx), and provides a [ReadableStream](http://nodejs.org/docs/latest/api/streams.html#readable_Stream) interface to the typeperf output.  Metrics are streamed once per second.  `perfmon` wraps up the typeperf executable as a child_process. It ensures that no more than one process will be spawned for each host machine streaming metrics.\n\n### Dependenices\n\nNode, Windows, and the typeperf executable in your path.  I've never seen a Windows installation that didn't have it, but it's not out of the realm of possibility.  Windows For Workgroups 3.11 had it. _Maybe._ Definitely NT4 and up.\n\nOnly the machine running Node needs Node. Makes perfect sense.  The only requirements to stream metrics from a remote machine are Windows running on that machine, and appropriate permissions to do so.\n\n## Install\n\n\tnpm install perfmon\n\n## Usage\n\nThe most basic usage is to stream a single metric from the local machine.  The `perfmon` function returns an instance of a ReadableStream.  You can either pass a callback as the last argument, or attach to the `data` and `error` events on the returned Stream.\n\nThe first two arguments to perfmon, `counters` and `hosts`, can be strings or arrays.  `hosts` is optional and assumed to be local machine if not specified.\n\n```javascript\nvar perfmon = require('perfmon');\n\nperfmon('\\\\processor(_total)\\\\% processor time', function(err, data) {\n\tconsole.log(data);\n});\n```\n\nThe `data` object logged to the console:\n\n```javascript\n{ host: 'yourcomputer',\n  time: 1328067580990, // UTC timestamp in ms\n  counters:\n  { '\\\\processor(_total)\\\\% processor time': 17 }\n}\n```\n\n### List available metric counters\n\nUse `list` to return a, um, list of available counters.\n\n```javascript\nperfmon.list('memory', function(err, data) {\n\tconsole.log(data);\n});\n```\n\nThe `data` object logged to the console:\n\n```javascript\n{ counters:\n  [ 'memory\\\\Page Faults/sec',\n    'memory\\\\Available Bytes',\n    'memory\\\\Committed Bytes',\n    // ... omitted for brevity ...\n    'memory\\\\Available KBytes',\n    'memory\\\\Available MBytes',\n    'memory\\\\Transition Pages RePurposed/sec',\n    'memory\\\\Free & Zero Page List Bytes',\n    'memory\\\\Modified Page List Bytes',\n    'memory\\\\Standby Cache Reserve Bytes',\n    'memory\\\\Standby Cache Normal Priority Bytes',\n    'memory\\\\Standby Cache Core Bytes' ],\nhost: 'yourcomputer' }\n```\n\n### Stream remote host metrics\n\nYou can connect to any host on your network and stream metrics from that machine. \n\n```javascript\nvar counters = [\n\t'\\\\processor(_total)\\\\% processor time',\n\t'\\\\memory\\\\available bytes',\n];\n\nperfmon(counters, 'somecomputer.somewhere.local', function(err, data) {\n\tconsole.log(data);\n});\n```",
  "readmeFilename": "README.md",
  "_id": "perfmon@0.2.0",
  "_from": "perfmon@>= 0.2.0"
}
